import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;

  Future<User?> login(String email, String password) async {
    try {
      final credential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
      return credential.user;
    } on FirebaseAuthException catch (e) {
      throw _mapErrorToBg(e.code);
    } catch (e, stack) {
      print('üî• Login error: $e');
      print(stack);
      throw '–í—ä–∑–Ω–∏–∫–Ω–∞ –Ω–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.';
    }
  }

  Future<User?> register(String email, String password) async {
    try {
      final credential = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      final user = credential.user;
      if (user != null) {
        await FirebaseFirestore.instance
            .collection('users')
            .doc(user.uid)
            .set({
          'email': user.email,
          'createdAt': DateTime.now(),
        });
      }

      return user;
    } on FirebaseAuthException catch (e) {
      throw _mapErrorToBg(e.code);
    } catch (e, stack) {
      print('üî• Register error: $e');
      print(stack);
      throw '–í—ä–∑–Ω–∏–∫–Ω–∞ –Ω–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.';
    }
  }

  Future<void> logout() async {
    await _auth.signOut();
  }

  String _mapErrorToBg(String code) {
    switch (code) {
      case 'invalid-email':
        return '–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª –∞–¥—Ä–µ—Å.';
      case 'user-disabled':
        return '–¢–æ–∑–∏ –∞–∫–∞—É–Ω—Ç –µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–Ω.';
      case 'user-not-found':
        return '–ù—è–º–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å —Ç–æ–∑–∏ –∏–º–µ–π–ª.';
      case 'wrong-password':
        return '–ì—Ä–µ—à–Ω–∞ –ø–∞—Ä–æ–ª–∞.';
      case 'email-already-in-use':
        return '–ò–º–µ–π–ª—ä—Ç –≤–µ—á–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞.';
      case 'weak-password':
        return '–ü–∞—Ä–æ–ª–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞ –ø–æ–Ω–µ 6 —Å–∏–º–≤–æ–ª–∞.';
      default:
        return '–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.';
    }
  }
}
